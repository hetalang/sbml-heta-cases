// This code was generated by Heta compiler, see https://hetalang.github.io
multiply #defineFunction { arguments: [x, y], math: x * y, };

t @TimeScale { };

C @Compartment 'C' { units: litre, boundary: true, } .= 1;

S1 @Species 'S1' { units: mole/litre, compartment: C, } .= 1e-4 / C;
S2 @Species 'S2' { units: mole/litre, compartment: C, } .= 2e-4 / C;
S3 @Species 'S3' { units: mole/litre, compartment: C, } .= 1.5e-4 / C;
S4 @Species 'S4' { units: mole/litre, compartment: C, };
S4 := multiply(k, S2);

reaction1 @Reaction 'reaction1' { actors: S1 + S2 = S3, reversible: false, };
reaction1 := C * k * S1 * S2;
reaction2 @Reaction 'reaction2' { actors: S3 = S1 + S2, reversible: false, };
reaction2 := C * k * S3;

k @Const 'k' { } = 0.75;

