// This code was generated by Heta compiler, see https://hetalang.github.io
multiply #defineFunction { arguments: [x, y], math: x * y, };

t @TimeScale { };

compartment @Compartment 'compartment' { units: litre, boundary: true, } .= 1;

S1 @Species 'S1' { units: mole/litre, compartment: compartment, } .= 0.001 / compartment;
S2 @Species 'S2' { units: mole/litre, compartment: compartment, } .= 0.002 / compartment;
S3 @Species 'S3' { units: mole/litre, compartment: compartment, } .= 0.001 / compartment;

reaction1 @Reaction 'reaction1' { actors: 2*S1 + S2 = S3, reversible: false, };
reaction1 := compartment * S1 * S2 * multiply(k1, S1);
reaction2 @Reaction 'reaction2' { actors: S3 = 2*S1 + S2, reversible: false, };
reaction2 := compartment * k2 * S3;

k1 @Const 'k1' { } = 1000;
k2 @Const 'k2' { } = 0.25;

