/*
category:        Test
synopsis:        Nested function definitions
componentTags:   FunctionDefinition, InitialAssignment, Parameter
testTags:        InitialValueReassigned
testType:        TimeCourse
levels:          2.2, 2.3, 2.4, 2.5, 3.1, 3.2
generatedBy:     Analytic
packagesPresent: 

 A very simple model that calls a function defintion with no arguments, nested three deep.

The model contains:
* 1 parameter (p1)
The model contains the following function definitions:

[{width:30em,margin: 1em auto}|  *Id*  |  *Arguments*  |  *Formula*  |
 | three |  | $3$ |
 | getthree |  | $three()$ |
 | getgetthree |  | $getthree()$ |
]
The initial conditions are as follows:

[{width:35em,margin: 1em auto}|       | *Value* | *Constant* |
| Initial value of parameter p1 | $getgetthree()$ | constant |]

Note: The test data for this model was generated from an analytical
solution of the system of equations.

*/


volume #defineUnit { units: litre, };
area #defineUnit { units: metre^2, };
length #defineUnit { units: metre, };
substance #defineUnit { units: mole, };
time #defineUnit { units: second, };
three #defineFunction { arguments: [], math: 3, };
getthree #defineFunction { arguments: [], math: three(), };
getgetthree #defineFunction { arguments: [], math: getthree(), };

t @TimeScale { };

p1 @Record { } .= getgetthree();

