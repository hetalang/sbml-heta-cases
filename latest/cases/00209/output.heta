/*
category:      Test
synopsis:      Basic reaction with two species in a 2-dimensional
compartment, where the species have only substance units.
componentTags: Compartment, Species, Reaction, Parameter 
testTags:      Amount, HasOnlySubstanceUnits
testType:      TimeCourse
levels:        2.1, 2.2, 2.3, 2.4, 2.5, 3.1, 3.2
generatedBy:   Numeric

The model contains one compartment called "compartment".  There are three
species named S1, S2 and S3 and two parameters named k1 and k2.
Compartment "compartment" is 2-dimensional.  Species S1, S2 and S3 are
declared to have only substance units.  The model contains two reactions
defined as:

[{width:30em,margin: 1em auto}|  *Reaction*  |  *Rate*  |
| S1 + S2 -> S3 | $k1 * S1 * S2$  |
| S3 -> S1 + S2 | $k2 * S3$  |]

The initial conditions are as follows:

[{width:30em,margin: 1em auto}|      |*Value*          |*Units*  |
|Initial amount of S1              |$1.0 \x 10^-1$ |mole                      |
|Initial amount of S2              |$2.0 \x 10^-1$ |mole                      |
|Initial amount of S3              |$1.0 \x 10^-1$ |mole                      |
|Value of parameter k1             |$           75$ |mole^-1^ second^-1^ |
|Value of parameter k2             |$           25$ |second^-1^ |
|Area of compartment "compartment" |$            1$ |metre^2^                  |]

The species have been declared as having substance units only.  Thus, they
must be treated as amounts where they appear in expressions.

*/



t @TimeScale { units: second, };

compartment @Compartment 'compartment' { units: metre^2, boundary: true, } .= 1;

S1 @Species 'S1' { units: mole, compartment: compartment, isAmount: true, } .= 0.1;
S2 @Species 'S2' { units: mole, compartment: compartment, isAmount: true, } .= 0.2;
S3 @Species 'S3' { units: mole, compartment: compartment, isAmount: true, } .= 0.1;

reaction1 @Reaction 'reaction1' { actors: S1 + S2 = S3, reversible: false, };
reaction1 := k1 * S1 * S2;
reaction2 @Reaction 'reaction2' { actors: S3 = S1 + S2, reversible: false, };
reaction2 := k2 * S3;

k1 @Const 'k1' { } = 75;
k2 @Const 'k2' { } = 25;

