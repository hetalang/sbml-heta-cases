/*
category:      Test
synopsis:      Basic two reactions using functionDefinitions with three species 
               and parameters local to reactions.
componentTags: Compartment, Parameter, Species, Reaction, FunctionDefinition 
testTags:      Amount, LocalParameters
testType:      TimeCourse
levels:        2.1, 2.2, 2.3, 2.4, 2.5, 3.1, 3.2
generatedBy:   Numeric

The model contains one compartment called "compartment".  There are three
species named S1, S2 and S3 and one parameter named k.  The model contains
two reactions defined as:

[{width:30em,margin: 1em auto}|  *Reaction*  |  *Rate*  |
| S1 -> S2 | $k * S1 * compartmen$  |
| S2 -> S3 | $multiply(k,S2) * compartment,$  |]

Reaction S2 -> S3 defines one local parameter k.  This parameter shadows the
global parameter k and thus in reaction S2 -> S3 the value of the local
parameter must be used.


The model contains one functionDefinition defined as:

[{width:30em,margin: 1em auto}|  *Id*  |  *Arguments*  |  *Formula*  |
 | multiply | x, y | $x * y$ |]


The initial conditions are as follows:

[{width:30em,margin: 1em auto}|       |*Value*          |*Units*  |
|Initial amount of S1                |$3.0 \x 10^-3$ |mole                      |
|Initial amount of S2                |$            0$ |mole                      |
|Initial amount of S3                |$            0$ |mole                      |
|Value of parameter k                |$            1$ |second^-1^ |
|Value of local parameter k          |$            2$ |second^-1^ |
|Volume of compartment "compartment" |$            1$ |litre                     |]

The species values are given as amounts of substance to make it easier to
use the model in a discrete stochastic simulator, but (as per usual SBML
principles) their symbols represent their values in concentration units
where they appear in expressions.

*/


multiply #defineFunction { arguments: [x, y], math: x * y, };

t @TimeScale { units: second, };

compartment @Compartment 'compartment' { units: litre, boundary: true, } .= 1;

S1 @Species 'S1' { units: mole/litre, compartment: compartment, } .= 0.003 / compartment;
S2 @Species 'S2' { units: mole/litre, compartment: compartment, } .= 0 / compartment;
S3 @Species 'S3' { units: mole/litre, compartment: compartment, } .= 0 / compartment;

reaction1 @Reaction 'reaction1' { actors: S1 = S2, reversible: false, };
reaction1 := compartment * k * S1;
reaction2 @Reaction 'reaction2' { actors: S2 = S3, reversible: false, };
reaction2 := compartment * multiply(k__reaction2_local, S2);

k__reaction2_local @Const { } = 2;
k @Const 'k' { } = 1;

