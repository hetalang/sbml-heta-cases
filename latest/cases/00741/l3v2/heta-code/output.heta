
add #defineFunction { arguments: [x, y], math: x + y, };

t @TimeScale { units: second, };

C @Compartment 'C' { units: litre, boundary: true, } .= 0.15;

S1 @Species 'S1' { units: mole/litre, compartment: C, } .= 1e-6;
S2 @Species 'S2' { units: mole/litre, compartment: C, } .= 1.5e-6;
S3 @Species 'S3' { units: mole/litre, compartment: C, } .= 2e-6;
S4 @Species 'S4' { units: mole/litre, compartment: C, } .= 5e-7;

reaction1 @Reaction 'reaction1' { actors: S1 + S2 = S3 + S4, reversible: false, };
reaction1 := C * k1 * S1 * S2;
reaction2 @Reaction 'reaction2' { actors: S3 + S4 = S1 + S2, reversible: false, };
reaction2 := C * k2 * S3 * S4;
k1_proc @Process { actors:  = k1, aux: {metaid: "rule1"}, };
k1_proc := p1 * add(k2, k3);

k1 @Record 'k1' { } .= 1e+6;

k2 @Const 'k2' { } = 300000;
k3 @Const 'k3' { } = 700000;
p1 @Const 'p1' { } = 1;

