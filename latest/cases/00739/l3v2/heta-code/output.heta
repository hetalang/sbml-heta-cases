
multiply #defineFunction { arguments: [x, y], math: x * y, };
func1 #defineFunction { arguments: [x, y], math: x * pow(y + 1, (-1)), };

t @TimeScale { units: second, };

C @Compartment 'C' { units: litre, boundary: true, } .= 2.5;

S1 @Species 'S1' { units: mole/litre, compartment: C, } .= 1;
S2 @Species 'S2' { units: mole/litre, compartment: C, } .= 0;
S3 @Species 'S3' { units: mole/litre, compartment: C, } .= 0;
S4 @Species 'S4' { units: mole/litre, compartment: C, } .= 0;
S4 := func1(S3, p1);
S5 @Species 'S5' { units: mole/litre, compartment: C, } .= 0;
S5 := multiply(S4, p1);

reaction1 @Reaction 'reaction1' { actors: S1 = S3, reversible: false, };
reaction1 := C * k1 * S1;
reaction2 @Reaction 'reaction2' { actors: S3 = S2, modifiers: [S5], reversible: false, };
reaction2 := C * k2 * S5;

k1 @Const 'k1' { } = 0.1;
k2 @Const 'k2' { } = 0.15;
p1 @Const 'p1' { } = 2.5;

