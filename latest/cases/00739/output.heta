/*
category:      Test
synopsis:      Two reactions with five species in one
compartment using an assignmentRules with functionDefinitions to vary two species.
componentTags: Compartment, Species, Reaction, Parameter, FunctionDefinition, AssignmentRule 
testTags:      Concentration, NonUnityCompartment
testType:      TimeCourse
levels:        2.1, 2.2, 2.3, 2.4, 2.5, 3.1, 3.2
generatedBy:   Numeric

The model contains one compartment called C.  There are five
species called S1, S2, S3, S4 and S5 and three parameters called k1, k2 and
p1.  The model contains two reactions defined as:

[{width:30em,margin: 1em auto}|  *Reaction*  |  *Rate*  |
| S1 -> S3 | $k1 * S1 * C$  |
| S3 -> S2 | $k2 * S5 * C$  |]

The model contains two rules:

[{width:30em,margin: 1em auto}|  *Type*  |  *Variable*  |  *Formula*  |
 | Assignment | S4 | $func1(S3, p1)$  |
 | Assignment | S5 | $multiply(S4, p1)$  |]

The model contains two functionDefinitions defined as:

[{width:30em,margin: 1em auto}|  *Id*  |  *Arguments*  |  *Formula*  |
 | multiply | x, y | $x * y$ |
 | func1 | x, y | $x / (1 + y)$ |]

The initial conditions are as follows:

[{width:30em,margin: 1em auto}|       |*Value*          |*Units*  |
|Initial concentration of S1                |$          1.0$ |mole litre^-1^                      |
|Initial concentration of S2                |$            0$ |mole litre^-1^                      |
|Initial concentration of S3                |$            0$ |mole litre^-1^                      |
|Initial concentration of S4                |$            0$ |mole litre^-1^                      |
|Initial concentration of S5                |$            0$ |mole litre^-1^                      |
|Value of parameter k1               |$          0.1$ |second^-1^ |
|Value of parameter k2               |$         0.15$ |second^-1^ |
|Value of parameter p1               |$          2.5$ |dimensionless |
|Volume of compartment C |$            2.5$ |litre                     |]

*/


multiply #defineFunction { arguments: [x, y], math: x * y, };
func1 #defineFunction { arguments: [x, y], math: x * pow(y + 1, (-1)), };

t @TimeScale { units: second, };

C @Compartment 'C' { units: litre, boundary: true, } .= 2.5;

S1 @Species 'S1' { units: mole/litre, compartment: C, } .= 1;
S2 @Species 'S2' { units: mole/litre, compartment: C, } .= 0;
S3 @Species 'S3' { units: mole/litre, compartment: C, } .= 0;
S4 @Species 'S4' { units: mole/litre, compartment: C, } .= 0;
S4 := func1(S3, p1);
S5 @Species 'S5' { units: mole/litre, compartment: C, } .= 0;
S5 := multiply(S4, p1);

reaction1 @Reaction 'reaction1' { actors: S1 = S3, reversible: false, };
reaction1 := C * k1 * S1;
reaction2 @Reaction 'reaction2' { actors: S3 = S2, modifiers: [S5], reversible: false, };
reaction2 := C * k2 * S5;

k1 @Const 'k1' { } = 0.1;
k2 @Const 'k2' { } = 0.15;
p1 @Const 'p1' { } = 2.5;

