
calculateerror #defineFunction { arguments: [x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16], math: pow(x0 - 0.0952, 2) / 0.0952 + pow(x1 - 1.523, 2) / 1.523 + pow(x2 - 11.428, 2) / 11.428 + pow(x3 - 53.32, 2) / 53.32 + pow(x4 - 173.29, 2) / 173.29 + pow(x5 - 415.898, 2) / 415.898 + pow(x6 - 762.48, 2) / 762.48 + pow(x7 - 1089.26, 2) / 1089.26 + pow(x8 - 1225.415, 2) / 1225.415 + pow(x9 - 1089.26, 2) / 1089.26 + pow(x10 - 762.48, 2) / 762.48 + pow(x11 - 415.898, 2) / 415.898 + pow(x12 - 173.29, 2) / 173.29 + pow(x13 - 53.32, 2) / 53.32 + pow(x14 - 11.428, 2) / 11.428 + pow(x15 - 1.523, 2) / 1.523 + pow(x16 - 0.0952, 2) / 0.0952, };

t @TimeScale { };

S @Record { } .= 0;
S := Q + R;
Q @Record { } .= 0;
Q [Qinc]= Q + 0.01;
R @Record { } .= 0;
R [Rinc]= R + 0.01;
reset @Record { } .= 0;
reset [Rinc]= t;
reset [Qinc]= t;
chicount @Record { } .= 0;
chicount [Rinc]= chicount + 1;
chicount [Qinc]= chicount + 1;
chicount [repeat]= 0;
chitest @Record { } .= 0;
chitest [Qinc]= chitest + 1;
chitest [_E17]= 0;
assemble @Record { } .= 0;
assemble [repeat]= 1.5;
assemble [_E17]= 0;
chi0 @Record { } .= 0;
chi0 [_E0]= chi0 + 1;
chi1 @Record { } .= 0;
chi1 [_E1]= chi1 + 1;
chi2 @Record { } .= 0;
chi2 [_E2]= chi2 + 1;
chi3 @Record { } .= 0;
chi3 [_E3]= chi3 + 1;
chi4 @Record { } .= 0;
chi4 [_E4]= chi4 + 1;
chi5 @Record { } .= 0;
chi5 [_E5]= chi5 + 1;
chi6 @Record { } .= 0;
chi6 [_E6]= chi6 + 1;
chi7 @Record { } .= 0;
chi7 [_E7]= chi7 + 1;
chi8 @Record { } .= 0;
chi8 [_E8]= chi8 + 1;
chi9 @Record { } .= 0;
chi9 [_E9]= chi9 + 1;
chi10 @Record { } .= 0;
chi10 [_E10]= chi10 + 1;
chi11 @Record { } .= 0;
chi11 [_E11]= chi11 + 1;
chi12 @Record { } .= 0;
chi12 [_E12]= chi12 + 1;
chi13 @Record { } .= 0;
chi13 [_E13]= chi13 + 1;
chi14 @Record { } .= 0;
chi14 [_E14]= chi14 + 1;
chi15 @Record { } .= 0;
chi15 [_E15]= chi15 + 1;
chi16 @Record { } .= 0;
chi16 [_E16]= chi16 + 1;
tests @Record { } .= 0;
tests [_E17]= tests + 1;
finalchi @Record { } .= 0;
finalchi [_E18]= calculateerror(chi0, chi1, chi2, chi3, chi4, chi5, chi6, chi7, chi8, chi9, chi10, chi11, chi12, chi13, chi14, chi15, chi16);
error @Record { } .= 0;
error [error_check]= 1;

Rinc @DSwitcher { trigger: (t - reset) >= 0.01, };
Qinc @DSwitcher { trigger: (t - reset) >= 0.01, };
repeat @DSwitcher { trigger: floor(chicount / 16) >= 1, };
_E0 @DSwitcher { trigger: assemble >= 1 and chitest == 0, };
_E1 @DSwitcher { trigger: assemble >= 1 and chitest == 1, };
_E2 @DSwitcher { trigger: assemble >= 1 and chitest == 2, };
_E3 @DSwitcher { trigger: assemble >= 1 and chitest == 3, };
_E4 @DSwitcher { trigger: assemble >= 1 and chitest == 4, };
_E5 @DSwitcher { trigger: assemble >= 1 and chitest == 5, };
_E6 @DSwitcher { trigger: assemble >= 1 and chitest == 6, };
_E7 @DSwitcher { trigger: assemble >= 1 and chitest == 7, };
_E8 @DSwitcher { trigger: assemble >= 1 and chitest == 8, };
_E9 @DSwitcher { trigger: assemble >= 1 and chitest == 9, };
_E10 @DSwitcher { trigger: assemble >= 1 and chitest == 10, };
_E11 @DSwitcher { trigger: assemble >= 1 and chitest == 11, };
_E12 @DSwitcher { trigger: assemble >= 1 and chitest == 12, };
_E13 @DSwitcher { trigger: assemble >= 1 and chitest == 13, };
_E14 @DSwitcher { trigger: assemble >= 1 and chitest == 14, };
_E15 @DSwitcher { trigger: assemble >= 1 and chitest == 15, };
_E16 @DSwitcher { trigger: assemble >= 1 and chitest == 16, };
_E17 @DSwitcher { trigger: assemble >= 1, };
_E18 @DSwitcher { trigger: tests >= 6240 and finalchi == 0, };
error_check @DSwitcher { trigger: finalchi > 50, };

