/*
category:      Test
synopsis:      Basic reaction and rate rule with three species in a compartment. 
componentTags: Compartment, Species, Reaction, Parameter, RateRule, EventNoDelay 
testTags:      Amount
testType:      TimeCourse
levels:        2.1, 2.2, 2.3, 2.4, 2.5, 3.1, 3.2
generatedBy:   Numeric

The model contains one compartment called C.  There are three
species called S1, S2 and S3 and one parameter called k1.  The model contains
one reaction defined as:

[{width:30em,margin: 1em auto}|  *Reaction*  |  *Rate*  |
| S1 -> S2 | $k1 * S1 * C$  |]

The model contains one rule:

[{width:30em,margin: 1em auto}|  *Type*  |  *Variable*  |  *Formula*  |
 | Rate | S3 | $0.15$  |]

The model contains one event that assigns a value to species S2:

[{width:30em,margin: 1em auto}| | *Trigger*    | *Delay* | *Assignments* |
 | Event1 | $S1 < 0.1$ | $-$   | $S2 = 1$    |]

The initial conditions are as follows:

[{width:30em,margin: 1em auto}|       |*Value*          |*Units*  |
|Initial amount of S1                |$          1.5$ |mole                      |
|Initial amount of S2                |$            0$ |mole                      |
|Initial amount of S3                |$            0$ |mole                      |
|Value of parameter k1               |$          1.5$ |second^-1^ |
|Volume of compartment C |$            1$ |litre                     |]

The species values are given as amounts of substance to make it easier to
use the model in a discrete stochastic simulator, but (as per usual SBML
principles) their symbols represent their values in concentration units
where they appear in expressions.

*/



t @TimeScale { units: second, };

C @Compartment 'C' { units: litre, boundary: true, } .= 1;

S1 @Species 'S1' { units: mole/litre, compartment: C, } .= 1.5 / C;
S2 @Species 'S2' { units: mole/litre, compartment: C, } .= 0 / C;
S2 [event1]= 1;
S3 @Species 'S3' { units: mole/litre, compartment: C, } .= 0 / C;

reaction1 @Reaction 'reaction1' { actors: S1 = S2, reversible: false, };
reaction1 := C * k1 * S1;
S3_proc @Process { actors:  = S3, aux: {{"metaid":"rule1"}}, };
S3_proc := 0.15;

k1 @Const 'k1' { } = 1.5;

event1 @DSwitcher 'event1' { trigger: S1 < 0.1, };

