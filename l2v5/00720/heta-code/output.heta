// This code was generated by Heta compiler, see https://hetalang.github.io
volume #defineUnit { units: metre^3, };
area #defineUnit { units: metre^2, };
length #defineUnit { units: metre, };
substance #defineUnit { units: (1e-6 mole), };
multiply #defineFunction { arguments: [x, y], math: x * y, };

namespace nameless begin
  t @TimeScale { };

  C @Compartment 'C' { units: volume, boundary: true, } .= 1;

  S1 @Species 'S1' { units: substance/volume, boundary: false, compartment: C, isAmount: false, } .= 1.5e-6 / C;
  S2 @Species 'S2' { units: substance/volume, boundary: false, compartment: C, isAmount: false, } .= 2e-6 / C;
  S3 @Species 'S3' { units: substance/volume, boundary: false, compartment: C, isAmount: false, } .= 1.5e-6 / C;
  S4 @Species 'S4' { units: substance/volume, boundary: false, compartment: C, isAmount: false, } .= 1e-7 / C;

  reaction1 @Reaction 'reaction1' { actors: S1 + 2*S2 = S3, reversible: false, };
  reaction1 := C * k1 * S1 * S2;
  reaction2 @Reaction 'reaction2' { actors: S3 = S1 + S2, reversible: false, };
  reaction2 := C * k2 * S3;
  S4_proc @Process { actors:  = S4, aux: {{"metaid":"rule1"}}, };
  S4_proc := multiply(k2, (1 / 2.5e+5));

  k1 @Record 'k1' { } .= 7.5e+5;
  k2 @Record 'k2' { } .= 0.25;
end
