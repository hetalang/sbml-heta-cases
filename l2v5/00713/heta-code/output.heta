// This code was generated by Heta compiler, see https://hetalang.github.io
volume #defineUnit { units: metre^3, };
area #defineUnit { units: metre^2, };
length #defineUnit { units: metre, };
substance #defineUnit { units: (1e-6 mole), };
add #defineFunction { arguments: [x, y], math: x + y, };

namespace nameless begin
  t @TimeScale { };

  C @Compartment 'C' { units: volume, boundary: true, } .= 0.15;

  S1 @Species 'S1' { units: substance/volume, boundary: false, compartment: C, isAmount: false, } .= 1e-6 / C;
  S2 @Species 'S2' { units: substance/volume, boundary: false, compartment: C, isAmount: false, } .= 1.5e-6 / C;
  S3 @Species 'S3' { units: substance/volume, boundary: false, compartment: C, isAmount: false, } .= 2e-6 / C;
  S4 @Species 'S4' { units: substance/volume, boundary: false, compartment: C, isAmount: false, } .= 5e-7 / C;

  reaction1 @Reaction 'reaction1' { actors: S1 + S2 = S3 + S4, reversible: false, };
  reaction1 := C * k1 * S1 * S2;
  reaction2 @Reaction 'reaction2' { actors: S3 + S4 = S1 + S2, reversible: false, };
  reaction2 := C * k2 * S3 * S4;
  k1_proc @Process { actors:  = k1, aux: {{"metaid":"rule1"}}, };
  k1_proc := p1 * add(k2, k3);

  k1 @Record 'k1' { boundary: false, } .= 1e+6;
  k2 @Record 'k2' { } .= 3e+5;
  k3 @Record 'k3' { } .= 7e+5;
  p1 @Record 'p1' { } .= 1;
end
