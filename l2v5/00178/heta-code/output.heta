// This code was generated by Heta compiler, see https://hetalang.github.io
volume #defineUnit { units: metre^3, };
area #defineUnit { units: metre^2, };
length #defineUnit { units: metre, };
substance #defineUnit { units: (1e-6 mole), };
multiply #defineFunction { arguments: [x, y, z], math: x * y * z, };

namespace nameless begin
  t @TimeScale { };

  S3_proc @Process { actors:  = S3, aux: {{"metaid":"rule1"}}, };
  S3_proc := multiply(k1, S1, S2) + (-1) * k2 * S3;
  S1_proc @Process { actors:  = S1, aux: {{"metaid":"rule2"}}, };
  S1_proc := k2 * S3 + (-1) * multiply(k1, S1, S2);
  S2_proc @Process { actors:  = S2, aux: {{"metaid":"rule3"}}, };
  S2_proc := k2 * S3 + (-1) * multiply(k1, S1, S2);

  S1 @Record 'S1' { boundary: false, } .= 0.1;
  S2 @Record 'S2' { boundary: false, } .= 0.2;
  S3 @Record 'S3' { boundary: false, } .= 0.1;
  k1 @Record 'k1' { } .= 0.75;
  k2 @Record 'k2' { } .= 0.25;
end
