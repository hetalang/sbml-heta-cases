/*
category:      Test
synopsis:      Rate rule using a functionDefinition used to determine value of parameter
               which is used in a reaction.
componentTags: Compartment, Species, Reaction, Parameter, FunctionDefinition, RateRule 
testTags:      Concentration, NonConstantParameter, NonUnityCompartment
testType:      TimeCourse
levels:        2.1, 2.2, 2.3, 2.4, 2.5, 3.1, 3.2
generatedBy:   Numeric

The model contains one compartment called C.  There are three
species called S1, S2 and S3; four constant parameters called k2, k3, p1 and
p2 and one varying parameter called k1.  The model contains two reactions defined as:

[{width:30em,margin: 1em auto}|  *Reaction*  |  *Rate*  |
| S1 + S2 -> S3 | $k1 * S1 * S2 * C$  |
| S3 -> S1 + S2 | $k2 * S3 * C$  |]

The model contains one rule that determines the value of parameter k1:

[{width:30em,margin: 1em auto}|  *Type*  |  *Variable*  |  *Formula*  |
 | Rate | k1 | $p1* add(p2 * k2, k3)$  |]


The model contains one functionDefinition defined as:

[{width:30em,margin: 1em auto}|  *Id*  |  *Arguments*  |  *Formula*  |
 | add | x, y | $x + y$ |]


The initial conditions are as follows:

[{width:30em,margin: 1em auto}|       |*Value*         |*Units*  |
|Initial concentration of S1                |$          1.0$ |mole litre^-1^                      |
|Initial concentration of S2                |$          2.0$ |mole litre^-1^                      |
|Initial concentration of S3                |$          1.0$ |mole litre^-1^                      |
|Value of parameter k1               |$          1.7$ |litre mole^-1^ second^-1^ |
|Value of parameter k2               |$          0.3$ |second^-1^ |
|Value of parameter k3               |$         -0.1$ |litre mole^-1^ second^-1^ |
|Value of parameter p1               |$            1$ |second^-1^                |
|Value of parameter p2               |$            1$ |litre mole^-1^                 |
|Volume of compartment C |$            1.25$ |litre                     |]

*/


add #defineFunction { arguments: [x, y], math: x + y, };

t @TimeScale { units: second, };

C @Compartment 'C' { units: litre, boundary: true, } .= 1.25;

S1 @Species 'S1' { units: mole/litre, compartment: C, } .= 1;
S2 @Species 'S2' { units: mole/litre, compartment: C, } .= 2;
S3 @Species 'S3' { units: mole/litre, compartment: C, } .= 1;

reaction1 @Reaction 'reaction1' { actors: S1 + S2 = S3, reversible: false, };
reaction1 := C * k1 * S1 * S2;
reaction2 @Reaction 'reaction2' { actors: S3 = S1 + S2, reversible: false, };
reaction2 := C * k2 * S3;
k1_proc @Process { actors:  = k1, aux: {{"metaid":"rule1"}}, };
k1_proc := p1 * add(k2 * p2, k3);

k1 @Record 'k1' { } .= 1.7;

k2 @Const 'k2' { } = 0.3;
k3 @Const 'k3' { } = -0.1;
p1 @Const 'p1' { } = 1;
p2 @Const 'p2' { } = 1;

