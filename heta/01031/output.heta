/*
category:      Test
synopsis:      Two reversible reactions with local parameters.
componentTags: Compartment, Species, Reaction 
testTags:      Amount, ReversibleReaction, LocalParameters
testType:      TimeCourse
levels:        1.2, 2.1, 2.2, 2.3, 2.4, 2.5, 3.1, 3.2
generatedBy:   Numeric

Note:  This test is a copy of model 831, with the products and reactants reversed, 
and a negative kinetic law.  This gives the same results, but during the simulation, 
the kinetic law actually goes negative (a requirement for reversibe reactions).  
The reaction listed below is therfore equivalent to the one in the file, but reversed from it.

The model contains one compartment called C.  There are two species called 
S1 and S2.  The model contains  two reactions defined as:

[{width:30em,margin: 1em auto}|  *Reaction*  |  *Rate*  |
| S1 <-> S2 | $(kf * S1 - kr * S2) * C$  |
| S3 <-> S4 | $(kf * S3 - kr * S4) * C$  |]

Both reactions define two local parameters kf and kr which have a
scope local to the defining reaction.

The initial conditions are as follows:

[{width:30em,margin: 1em auto}| |*Value*       |*Units*  |
|Initial amount of S1        |$1.0$ |mole                      |
|Initial amount of S2        |$0$ |mole                      |
|Value of local parameter kf (R1)       |$0.8$          |second^-1^ |
|Value of local parameter kr (R1)      |$0.06$          |second^-1^ |
|Value of local parameter kf (R1)      |$0.9$          |second^-1^ |
|Value of local parameter kr (R2)      |$0.075$          |second^-1^ |
|Volume of compartment C     |$1$             |litre                  |]

The species values are given as amounts of substance to make it easier to
use the model in a discrete stochastic simulator, but (as per usual SBML
principles) their symbols represent their values in concentration units
where they appear in expressions.

*/


volume #defineUnit { units: litre, };
area #defineUnit { units: metre^2, };
length #defineUnit { units: metre, };
substance #defineUnit { units: mole, };
time #defineUnit { units: second, };

t @TimeScale { };

C @Compartment 'C' { units: litre, boundary: true, } .= 1;

S1 @Species 'S1' { units: mole/litre, compartment: C, } .= 1 / C;
S2 @Species 'S2' { units: mole/litre, compartment: C, } .= 0 / C;
S3 @Species 'S3' { units: mole/litre, compartment: C, } .= 1.5 / C;
S4 @Species 'S4' { units: mole/litre, compartment: C, } .= 0.5 / C;

reaction1 @Reaction 'reaction1' { actors: S2 = S1, };
reaction1 := (-(C * (kf__reaction1_local * S1 + (-1) * kr__reaction1_local * S2)));
reaction2 @Reaction 'reaction2' { actors: S4 = S3, };
reaction2 := (-(C * (kf__reaction2_local * S3 + (-1) * kr__reaction2_local * S4)));

kf__reaction1_local @Const { } = 0.8;
kr__reaction1_local @Const { } = 0.06;
kf__reaction2_local @Const { } = 0.9;
kr__reaction2_local @Const { } = 0.075;

