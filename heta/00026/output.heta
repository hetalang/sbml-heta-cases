/*
category:      Test
synopsis:      Single forward reaction with two species in one compartment 
               and one event that assigns value to a species.
componentTags: Compartment, Species, Reaction, Parameter, EventNoDelay 
testTags:      Amount
testType:      TimeCourse
levels:        2.1, 2.2, 2.3, 2.4, 2.5, 3.1, 3.2
generatedBy:   Numeric

The model contains one compartment called "compartment".  There are two
species named S1 and S2 and one parameter named k1.  The model contains one
reaction defined as:

[{width:30em,margin: 1em auto}|  *Reaction*  |  *Rate*  |
| S1 -> S2 | $compartment * S1 * k1$  |]

The model contains one event that assigns value to species S1 defined as:

[{width:30em,margin: 1em auto}| | *Trigger*    | *Delay* | *Assignments* |
 | Event1 | $S1 < 0.1$ | $-$   | $S1 = 1$    |]


The initial conditions are as follows:

[{width:30em,margin: 1em auto}|       |*Value*          |*Units*  |
|Initial amount of S1                |$       1.0$ |mole                      |
|Initial amount of S2                |$       0$ |mole                      |
|Value of parameter k1               |$            1$ |second^-1^                |
|Volume of compartment "compartment" |$            1$ |litre                     |]

The species values are given as amounts of substance to make it easier to
use the model in a discrete stochastic simulator, but (as per usual SBML
principles) their symbols represent their values in concentration units
where they appear in expressions.

*/



t @TimeScale { units: second, };

compartment @Compartment 'compartment' { units: litre, boundary: true, } .= 1;

S1 @Species 'S1' { units: mole/litre, compartment: compartment, } .= 1 / compartment;
S1 [event1]= 1;
S2 @Species 'S2' { units: mole/litre, compartment: compartment, } .= 0 / compartment;

reaction1 @Reaction 'reaction1' { actors: S1 = S2, reversible: false, };
reaction1 := compartment * k1 * S1;

k1 @Const 'k1' { } = 1;

event1 @DSwitcher 'event1' { trigger: S1 < 0.1, };

