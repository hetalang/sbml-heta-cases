#= 
    This code was generated by heta-compiler of v0.5.3
    
=#

module julia 
using SimSolver

### create default constants
constants_ = NamedTuple{(
  :k__reaction1_local,
)}(Float64[
  100,
])

### initialization of ODE variables and Records
function start_(cons)
    #(k__reaction1_local,) = cons

    # Heta initialize
    t = 0.0 # initial time
    compartment = 0.534
    S2 = 0.0 / compartment
    S1 = 0.015 / compartment
    reaction1 = compartment * cons[1] * S1
    
    # save results

    return (
        [
            S1 * compartment,
            S2 * compartment,
        ],
        
        [
            compartment,
        ]
    )
end

### calculate RHS of ODE
function ode_(du, u, p, t)
    cons = p.constants
    (compartment,) = p.static
    (S1_,S2_,) = u 

    # Heta rules
    S2 = S2_ / compartment
    S1 = S1_ / compartment
    reaction1 = compartment * cons[1] * S1
    
    #p.static .= [compartment,]
    du .= [
      -reaction1,  # dS1_/dt
      reaction1,  # dS2_/dt
    ]
end

### output function
function make_saving_(outputIds::Vector{Symbol})
    function saving_(u, t, integrator)
        cons = integrator.p.constants
        (compartment,) = integrator.p.static
        (S1_,S2_,) = u

        # Heta rules
        S2 = S2_ / compartment
        S1 = S1_ / compartment
        reaction1 = compartment * cons[1] * S1
        
        # calculate amounts
        compartment_ = compartment
        reaction1_ = reaction1

        d = Base.@locals
        return [d[id] for id in outputIds]
    end
end

### events


### OUTPUT ###

x00027 = Model(
  start_,
  ode_,
  [],
  [], # place for discrete events, not used
  make_saving_,
  constants_
)

models = (
    x00027 = x00027
)
tasks = ()

export models, tasks

end
