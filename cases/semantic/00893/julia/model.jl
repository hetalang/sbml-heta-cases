#= 
    This code was generated by heta-compiler of v0.5.8
    
=#

module julia 
using SimSolver

### create default constants
constants_ = NamedTuple{(
  
)}(Float64[
  
])

### initialization of ODE variables and Records
function start_(cons)
    #() = cons

    # Heta initialize
    t = 0.0 # initial time
    P2 = 0.0
    k1 = 0.5
    P3_proc = k1 * t
    P1 = 0.0015
    P3 = 0.001
    P1_proc = (-1.0) * P1 * P3
    P2_proc = P1 * P3
    
    # save results

    return (
        [
            P1,
            P2,
            P3,
        ],
        
        [
            k1,
        ]
    )
end

### calculate RHS of ODE
function ode_(du, u, p, t)
    cons = p.constants
    (k1,) = p.static
    (P1_,P2_,P3_,) = u 

    # Heta rules
    P2 = P2_
    P3_proc = k1 * t
    P1 = P1_
    P3 = P3_
    P1_proc = (-1.0) * P1 * P3
    P2_proc = P1 * P3
    
    #p.static .= [k1,]
    du .= [
      P1_proc,  # dP1_/dt
      P2_proc,  # dP2_/dt
      P3_proc,  # dP3_/dt
    ]
end

### output function
function make_saving_(outputIds::Vector{Symbol})
    function saving_(u, t, integrator)
        cons = integrator.p.constants
        (k1,) = integrator.p.static
        (P1_,P2_,P3_,) = u

        # Heta rules
        P2 = P2_
        P3_proc = k1 * t
        P1 = P1_
        P3 = P3_
        P1_proc = (-1.0) * P1 * P3
        P2_proc = P1 * P3
        
        # calculate amounts
        k1_ = k1
        P3_proc_ = P3_proc
        P1_proc_ = P1_proc
        P2_proc_ = P2_proc

        d = Base.@locals
        return [d[id] for id in outputIds]
    end
end

### time events

### discrete events


### continous events


### event assignments


### OUTPUT ###

x00893 = Model(
  start_,
  ode_,
  [
  ],
  make_saving_,
  constants_
)

models = (
    x00893 = x00893
)
tasks = ()

export models, tasks

end
