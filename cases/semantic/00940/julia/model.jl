#= 
    This code was generated by heta-compiler of v0.5.9
    
=#

module julia 
using SimSolver

### create default constants
constants_ = NamedTuple{(
  
)}(Float64[
  
])

### initialization of ODE variables and Records
function start_(cons)
    #() = cons

    # Heta initialize
    t = 0.0 # initial time
    default_compartment = 1.0
    x = 1.0 * sin(10.0 * t)
    y = 2.0 + delay(x, 0.5)
    
    # save results

    return (
        [ 0.0 ], # init for fake variable
        [
            default_compartment,
            x,
        ]
    )
end

### calculate RHS of ODE
function ode_(du, u, p, t)
    cons = p.constants
    (default_compartment,x,) = p.static
    () = u 

    # Heta rules
    y = 2.0 + delay(x, 0.5)
    
    #p.static .= [default_compartment,x,]
    du .= [ 1.0 ] # RHS for fake variable
end

### output function
function make_saving_(outputIds::Vector{Symbol})
    function saving_(u, t, integrator)
        cons = integrator.p.constants
        (default_compartment,x,) = integrator.p.static
        () = u

        # Heta rules
        y = 2.0 + delay(x, 0.5)
        
        # calculate amounts
        default_compartment_ = default_compartment
        x_ = x * default_compartment
        y_ = y

        d = Base.@locals
        return [d[id] for id in outputIds]
    end
end

### time events

### discrete events

### continous events

### event assignments


### OUTPUT ###

x00940 = Model(
  start_,
  ode_,
  [
  ],
  make_saving_,
  constants_
)

models = (
    x00940 = x00940
)
tasks = ()

export models, tasks

end
