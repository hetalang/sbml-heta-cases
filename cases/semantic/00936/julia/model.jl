#= 
    This code was generated by heta-compiler of v0.5.9
    
=#

module julia 
using SimSolver

### create default constants
constants_ = NamedTuple{(
  
)}(Float64[
  
])

### initialization of ODE variables and Records
function start_(cons)
    #() = cons

    # Heta initialize
    t = 0.0 # initial time
    default_compartment = 1.0
    S1 = ((t <= 2.0) ? sin(t * 10.0) : 1.0)
    S2 = 0.0
    
    # save results

    return (
        [ 0.0 ], # init for fake variable
        [
            default_compartment,
            S2,
        ]
    )
end

### calculate RHS of ODE
function ode_(du, u, p, t)
    cons = p.constants
    (default_compartment,S2,) = p.static
    () = u 

    # Heta rules
    S1 = ((t <= 2.0) ? sin(t * 10.0) : 1.0)
    
    #p.static .= [default_compartment,S2,]
    du .= [ 1.0 ] # RHS for fake variable
end

### output function
function make_saving_(outputIds::Vector{Symbol})
    function saving_(u, t, integrator)
        cons = integrator.p.constants
        (default_compartment,S2,) = integrator.p.static
        () = u

        # Heta rules
        S1 = ((t <= 2.0) ? sin(t * 10.0) : 1.0)
        
        # calculate amounts
        default_compartment_ = default_compartment
        S1_ = S1 * default_compartment
        S2_ = S2 * default_compartment

        d = Base.@locals
        return [d[id] for id in outputIds]
    end
end

### time events

### discrete events
function _E0_trigger_(u, t, integrator)
    cons = integrator.p.constants
    (default_compartment,S2,) = integrator.p.static
    () = u

    # Heta rules
    S1 = ((t <= 2.0) ? sin(t * 10.0) : 1.0)
    

    return S1 < 0.0 ? 1 : -1
end

### continous events

### event assignments
function _E0_assignment_(integrator)
    cons = integrator.p.constants
    t = integrator.t
    (default_compartment,S2,) = integrator.p.static
    () = integrator.u

    # Heta rules
    S1 = ((t <= 2.0) ? sin(t * 10.0) : 1.0)
    
    # recalculated values
    (S2,) = (S2 + 1.0,)
    
    # save results

    integrator.u .= [
    ]
    
    integrator.p.static .= [default_compartment,S2,]
end


### OUTPUT ###

x00936 = Model(
  start_,
  ode_,
  [
      DEvent(_E0_trigger_, _E0_assignment_),
  ],
  make_saving_,
  constants_
)

models = (
    x00936 = x00936
)
tasks = ()

export models, tasks

end
