#= 
    This code was generated by heta-compiler of v0.5.3
    
=#

module julia 
using SimSolver

### create default constants
constants_ = NamedTuple{(
  
)}(Float64[
  
])

### initialization of ODE variables and Records
function start_(cons)
    #() = cons

    # Heta initialize
    t = 0.0 # initial time
    compartment = 1.0
    S2 = 0.002 / compartment
    S3 = 0.0015 / compartment
    S4 = 0.004 / compartment
    k1 = 0.693
    S1 = 0.0015 / compartment
    reaction1 = compartment * k1 * S1
    S3_proc = 5e-4 * k1
    k2 = 0.25
    S4_proc = (-5e-4) * k2
    
    # save results

    return (
        [
            S2 * compartment,
            S3 * compartment,
            S4 * compartment,
        ],
        
        [
            compartment,
            S1,
            k1,
            k2,
        ]
    )
end

### calculate RHS of ODE
function ode_(du, u, p, t)
    cons = p.constants
    (compartment,S1,k1,k2,) = p.static
    (S2_,S3_,S4_,) = u 

    # Heta rules
    S2 = S2_ / compartment
    S3 = S3_ / compartment
    S4 = S4_ / compartment
    reaction1 = compartment * k1 * S1
    S3_proc = 5e-4 * k1
    S4_proc = (-5e-4) * k2
    
    #p.static .= [compartment,S1,k1,k2,]
    du .= [
      reaction1,  # dS2_/dt
      S3_proc*compartment,  # dS3_/dt
      S4_proc*compartment,  # dS4_/dt
    ]
end

### output function
function make_saving_(outputIds::Vector{Symbol})
    function saving_(u, t, integrator)
        cons = integrator.p.constants
        (compartment,S1,k1,k2,) = integrator.p.static
        (S2_,S3_,S4_,) = u

        # Heta rules
        S2 = S2_ / compartment
        S3 = S3_ / compartment
        S4 = S4_ / compartment
        reaction1 = compartment * k1 * S1
        S3_proc = 5e-4 * k1
        S4_proc = (-5e-4) * k2
        
        # calculate amounts
        compartment_ = compartment
        S1_ = S1 * compartment
        reaction1_ = reaction1
        k1_ = k1
        k2_ = k2
        S3_proc_ = S3_proc
        S4_proc_ = S4_proc

        d = Base.@locals
        return [d[id] for id in outputIds]
    end
end

### events


### OUTPUT ###

x00343 = Model(
  start_,
  ode_,
  [],
  [], # place for discrete events, not used
  make_saving_,
  constants_
)

models = (
    x00343 = x00343
)
tasks = ()

export models, tasks

end
