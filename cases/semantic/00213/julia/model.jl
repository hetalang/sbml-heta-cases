#= 
    This code was generated by heta-compiler of v0.5.3
    
=#

module julia 
using SimSolver

### create default constants
constants_ = NamedTuple{(
  
)}(Float64[
  
])

### initialization of ODE variables and Records
function start_(cons)
    #() = cons

    # Heta initialize
    t = 0.0 # initial time
    compartment = 1.0
    S2 = 0.001 / compartment
    k1 = 1.0
    S1 = 0.0015 / compartment
    reaction1 = compartment * k1 * S1
    
    # save results

    return (
        [ 0.0 ], # init for fake variable
        [
            compartment,
            S1,
            S2,
            k1,
        ]
    )
end

### calculate RHS of ODE
function ode_(du, u, p, t)
    cons = p.constants
    (compartment,S1,S2,k1,) = p.static
    () = u 

    # Heta rules
    reaction1 = compartment * k1 * S1
    
    #p.static .= [compartment,S1,S2,k1,]
    du .= [ 1.0 ] # RHS for fake variable
end

### output function
function make_saving_(outputIds::Vector{Symbol})
    function saving_(u, t, integrator)
        cons = integrator.p.constants
        (compartment,S1,S2,k1,) = integrator.p.static
        () = u

        # Heta rules
        reaction1 = compartment * k1 * S1
        
        # calculate amounts
        compartment_ = compartment
        S1_ = S1 * compartment
        S2_ = S2 * compartment
        reaction1_ = reaction1
        k1_ = k1

        d = Base.@locals
        return [d[id] for id in outputIds]
    end
end

### events


### OUTPUT ###

x00213 = Model(
  start_,
  ode_,
  [],
  [], # place for discrete events, not used
  make_saving_,
  constants_
)

models = (
    x00213 = x00213
)
tasks = ()

export models, tasks

end
