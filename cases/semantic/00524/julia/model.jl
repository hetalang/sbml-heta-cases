#= 
    This code was generated by heta-compiler of v0.5.3
    
=#

module julia 
using SimSolver

### create default constants
constants_ = NamedTuple{(
  :k__reaction1_local,:k__reaction2_local,
)}(Float64[
  0.75,0.25,
])

### initialization of ODE variables and Records
function start_(cons)
    #(k__reaction1_local,k__reaction2_local,) = cons

    # Heta initialize
    t = 0.0 # initial time
    p1 = 1.25e-5
    S1 = 2.0 * p1
    C = 1.0
    S2 = 2e-4 / C
    reaction1 = C * cons[1] * S1 * S2
    S3 = 1e-4 / C
    reaction2 = C * cons[2] * S3
    
    # save results

    return (
        [
            S1 * C,
            S2 * C,
            S3 * C,
        ],
        
        [
            C,
            p1,
        ]
    )
end

### calculate RHS of ODE
function ode_(du, u, p, t)
    cons = p.constants
    (C,p1,) = p.static
    (S1_,S2_,S3_,) = u 

    # Heta rules
    S1 = S1_ / C
    S2 = S2_ / C
    reaction1 = C * cons[1] * S1 * S2
    S3 = S3_ / C
    reaction2 = C * cons[2] * S3
    
    #p.static .= [C,p1,]
    du .= [
      -reaction1+reaction2,  # dS1_/dt
      -reaction1+reaction2,  # dS2_/dt
      reaction1-reaction2,  # dS3_/dt
    ]
end

### output function
function make_saving_(outputIds::Vector{Symbol})
    function saving_(u, t, integrator)
        cons = integrator.p.constants
        (C,p1,) = integrator.p.static
        (S1_,S2_,S3_,) = u

        # Heta rules
        S1 = S1_ / C
        S2 = S2_ / C
        reaction1 = C * cons[1] * S1 * S2
        S3 = S3_ / C
        reaction2 = C * cons[2] * S3
        
        # calculate amounts
        C_ = C
        reaction1_ = reaction1
        reaction2_ = reaction2
        p1_ = p1

        d = Base.@locals
        return [d[id] for id in outputIds]
    end
end

### events


### OUTPUT ###

x00524 = Model(
  start_,
  ode_,
  [],
  [], # place for discrete events, not used
  make_saving_,
  constants_
)

models = (
    x00524 = x00524
)
tasks = ()

export models, tasks

end
