#= 
    This code was generated by heta-compiler of v0.5.8
    
=#

module julia 
using SimSolver

### create default constants
constants_ = NamedTuple{(
  
)}(Float64[
  
])

### initialization of ODE variables and Records
function start_(cons)
    #() = cons

    # Heta initialize
    t = 0.0 # initial time
    C = 1.0
    A3 = 4.0 / C
    A4 = 1.0 / C
    Kf1 = 1.0
    reaction1 = A4 * C * Kf1
    A1 = 2.0 / C
    A2 = 3.0 / C
    Kf = 1.0
    reaction2 = A1 * A2 * C * Kf
    
    # save results

    return (
        [
            A1 * C,
            A2 * C,
            A3 * C,
            A4 * C,
        ],
        
        [
            C,
            Kf1,
            Kf,
        ]
    )
end

### calculate RHS of ODE
function ode_(du, u, p, t)
    cons = p.constants
    (C,Kf1,Kf,) = p.static
    (A1_,A2_,A3_,A4_,) = u 

    # Heta rules
    A3 = A3_ / C
    A4 = A4_ / C
    reaction1 = A4 * C * Kf1
    A1 = A1_ / C
    A2 = A2_ / C
    reaction2 = A1 * A2 * C * Kf
    
    #p.static .= [C,Kf1,Kf,]
    du .= [
      -reaction2,  # dA1_/dt
      reaction1-reaction2,  # dA2_/dt
      reaction2,  # dA3_/dt
      -reaction1,  # dA4_/dt
    ]
end

### output function
function make_saving_(outputIds::Vector{Symbol})
    function saving_(u, t, integrator)
        cons = integrator.p.constants
        (C,Kf1,Kf,) = integrator.p.static
        (A1_,A2_,A3_,A4_,) = u

        # Heta rules
        A3 = A3_ / C
        A4 = A4_ / C
        reaction1 = A4 * C * Kf1
        A1 = A1_ / C
        A2 = A2_ / C
        reaction2 = A1 * A2 * C * Kf
        
        # calculate amounts
        C_ = C
        reaction1_ = reaction1
        reaction2_ = reaction2
        Kf1_ = Kf1
        Kf_ = Kf

        d = Base.@locals
        return [d[id] for id in outputIds]
    end
end

### time events

### discrete events


### continous events


### event assignments


### OUTPUT ###

x00871 = Model(
  start_,
  ode_,
  [
  ],
  make_saving_,
  constants_
)

models = (
    x00871 = x00871
)
tasks = ()

export models, tasks

end
