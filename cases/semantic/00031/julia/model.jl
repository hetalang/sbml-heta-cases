#= 
    This code was generated by heta-compiler of v0.5.3
    
=#

module julia 
using SimSolver

### create default constants
constants_ = NamedTuple{(
  
)}(Float64[
  
])

### initialization of ODE variables and Records
function start_(cons)
    #() = cons

    # Heta initialize
    t = 0.0 # initial time
    compartment = 1.0
    S1 = 0.0 / compartment
    S1_proc = 7.0
    
    # save results

    return (
        [
            S1 * compartment,
        ],
        
        [
            compartment,
        ]
    )
end

### calculate RHS of ODE
function ode_(du, u, p, t)
    cons = p.constants
    (compartment,) = p.static
    (S1_,) = u 

    # Heta rules
    S1 = S1_ / compartment
    S1_proc = 7.0
    
    #p.static .= [compartment,]
    du .= [
      S1_proc*compartment,  # dS1_/dt
    ]
end

### output function
function make_saving_(outputIds::Vector{Symbol})
    function saving_(u, t, integrator)
        cons = integrator.p.constants
        (compartment,) = integrator.p.static
        (S1_,) = u

        # Heta rules
        S1 = S1_ / compartment
        S1_proc = 7.0
        
        # calculate amounts
        compartment_ = compartment
        S1_proc_ = S1_proc

        d = Base.@locals
        return [d[id] for id in outputIds]
    end
end

### events


### OUTPUT ###

x00031 = Model(
  start_,
  ode_,
  [],
  [], # place for discrete events, not used
  make_saving_,
  constants_
)

models = (
    x00031 = x00031
)
tasks = ()

export models, tasks

end
