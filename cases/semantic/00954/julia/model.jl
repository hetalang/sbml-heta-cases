#= 
    This code was generated by heta-compiler of v0.5.9
    
=#

module julia 
using SimSolver

### create default constants
constants_ = NamedTuple{(
  
)}(Float64[
  
])

### initialization of ODE variables and Records
function start_(cons)
    #() = cons

    # Heta initialize
    t = 0.0 # initial time
    P1 = 3.7
    P2 = abs((-1.0))
    P3 = abs(1.0)
    P4 = acos((-1.0))
    P5 = acos(0.5)
    P6 = asin(1.0)
    P7 = asin((-0.5))
    P8 = atan(2.8)
    P9 = atan((-7.09))
    P10 = ceil(0.5)
    P11 = ceil(3.55)
    P12 = ceil((-4.6))
    P13 = cos(9.1)
    P14 = cos((-0.22))
    P15 = exp(0.0)
    P16 = exp(1.0)
    P17 = exp(0.77)
    P18 = floor((-4.6))
    P19 = floor(9.1)
    P20 = log(0.2)
    P21 = log(1.0)
    P22 = log(10.0, 0.2)
    P23 = log(10.0, 1.0)
    P24 = ^(1.0, 2.0)
    P25 = ^(2.0, 2.0)
    P26 = ^(1.4, 5.1)
    P27 = ^(4.0, 2.0)
    P28 = ^(3.1, 2.0)
    P29 = nthRoot(4.0, 2.0)
    P30 = nthRoot(7.4, 2.0)
    P31 = sin(2.1)
    P32 = sin(0.0)
    P33 = sin((-5.9))
    P34 = tan(0.0)
    P35 = tan(1.11)
    P36 = tan((-6.0))
    P37 = 1.0 + 2.0
    P38 = 1.0 - 2.0
    P39 = 5.0 / 2.0
    P40 = 8.0 * 3.0
    
    # save results

    return (
        [ 0.0 ], # init for fake variable
        [
            P1,
        ]
    )
end

### calculate RHS of ODE
function ode_(du, u, p, t)
    cons = p.constants
    (P1,) = p.static
    () = u 

    # Heta rules
    P2 = abs((-1.0))
    P3 = abs(1.0)
    P4 = acos((-1.0))
    P5 = acos(0.5)
    P6 = asin(1.0)
    P7 = asin((-0.5))
    P8 = atan(2.8)
    P9 = atan((-7.09))
    P10 = ceil(0.5)
    P11 = ceil(3.55)
    P12 = ceil((-4.6))
    P13 = cos(9.1)
    P14 = cos((-0.22))
    P15 = exp(0.0)
    P16 = exp(1.0)
    P17 = exp(0.77)
    P18 = floor((-4.6))
    P19 = floor(9.1)
    P20 = log(0.2)
    P21 = log(1.0)
    P22 = log(10.0, 0.2)
    P23 = log(10.0, 1.0)
    P24 = ^(1.0, 2.0)
    P25 = ^(2.0, 2.0)
    P26 = ^(1.4, 5.1)
    P27 = ^(4.0, 2.0)
    P28 = ^(3.1, 2.0)
    P29 = nthRoot(4.0, 2.0)
    P30 = nthRoot(7.4, 2.0)
    P31 = sin(2.1)
    P32 = sin(0.0)
    P33 = sin((-5.9))
    P34 = tan(0.0)
    P35 = tan(1.11)
    P36 = tan((-6.0))
    P37 = 1.0 + 2.0
    P38 = 1.0 - 2.0
    P39 = 5.0 / 2.0
    P40 = 8.0 * 3.0
    
    #p.static .= [P1,]
    du .= [ 1.0 ] # RHS for fake variable
end

### output function
function make_saving_(outputIds::Vector{Symbol})
    function saving_(u, t, integrator)
        cons = integrator.p.constants
        (P1,) = integrator.p.static
        () = u

        # Heta rules
        P2 = abs((-1.0))
        P3 = abs(1.0)
        P4 = acos((-1.0))
        P5 = acos(0.5)
        P6 = asin(1.0)
        P7 = asin((-0.5))
        P8 = atan(2.8)
        P9 = atan((-7.09))
        P10 = ceil(0.5)
        P11 = ceil(3.55)
        P12 = ceil((-4.6))
        P13 = cos(9.1)
        P14 = cos((-0.22))
        P15 = exp(0.0)
        P16 = exp(1.0)
        P17 = exp(0.77)
        P18 = floor((-4.6))
        P19 = floor(9.1)
        P20 = log(0.2)
        P21 = log(1.0)
        P22 = log(10.0, 0.2)
        P23 = log(10.0, 1.0)
        P24 = ^(1.0, 2.0)
        P25 = ^(2.0, 2.0)
        P26 = ^(1.4, 5.1)
        P27 = ^(4.0, 2.0)
        P28 = ^(3.1, 2.0)
        P29 = nthRoot(4.0, 2.0)
        P30 = nthRoot(7.4, 2.0)
        P31 = sin(2.1)
        P32 = sin(0.0)
        P33 = sin((-5.9))
        P34 = tan(0.0)
        P35 = tan(1.11)
        P36 = tan((-6.0))
        P37 = 1.0 + 2.0
        P38 = 1.0 - 2.0
        P39 = 5.0 / 2.0
        P40 = 8.0 * 3.0
        
        # calculate amounts
        P1_ = P1
        P2_ = P2
        P3_ = P3
        P4_ = P4
        P5_ = P5
        P6_ = P6
        P7_ = P7
        P8_ = P8
        P9_ = P9
        P10_ = P10
        P11_ = P11
        P12_ = P12
        P13_ = P13
        P14_ = P14
        P15_ = P15
        P16_ = P16
        P17_ = P17
        P18_ = P18
        P19_ = P19
        P20_ = P20
        P21_ = P21
        P22_ = P22
        P23_ = P23
        P24_ = P24
        P25_ = P25
        P26_ = P26
        P27_ = P27
        P28_ = P28
        P29_ = P29
        P30_ = P30
        P31_ = P31
        P32_ = P32
        P33_ = P33
        P34_ = P34
        P35_ = P35
        P36_ = P36
        P37_ = P37
        P38_ = P38
        P39_ = P39
        P40_ = P40

        d = Base.@locals
        return [d[id] for id in outputIds]
    end
end

### time events

### discrete events

### continous events

### event assignments


### OUTPUT ###

x00954 = Model(
  start_,
  ode_,
  [
  ],
  make_saving_,
  constants_
)

models = (
    x00954 = x00954
)
tasks = ()

export models, tasks

end
