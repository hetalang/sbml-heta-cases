#= 
    This code was generated by heta-compiler of v0.5.9
    
=#

module julia 
using SimSolver

### create default constants
constants_ = NamedTuple{(
  
)}(Float64[
  
])

### initialization of ODE variables and Records
function start_(cons)
    #() = cons

    # Heta initialize
    t = 0.0 # initial time
    _J0 = 1.0
    default_compartment = 1.0
    x = 3.0 / default_compartment
    y = 2.0 + delay(x, 0.2)
    
    # save results

    return (
        [
            x * default_compartment,
        ],
        
        [
            default_compartment,
        ]
    )
end

### calculate RHS of ODE
function ode_(du, u, p, t)
    cons = p.constants
    (default_compartment,) = p.static
    (x_,) = u 

    # Heta rules
    _J0 = 1.0
    x = x_ / default_compartment
    y = 2.0 + delay(x, 0.2)
    
    #p.static .= [default_compartment,]
    du .= [
      _J0,  # dx_/dt
    ]
end

### output function
function make_saving_(outputIds::Vector{Symbol})
    function saving_(u, t, integrator)
        cons = integrator.p.constants
        (default_compartment,) = integrator.p.static
        (x_,) = u

        # Heta rules
        _J0 = 1.0
        x = x_ / default_compartment
        y = 2.0 + delay(x, 0.2)
        
        # calculate amounts
        default_compartment_ = default_compartment
        _J0_ = _J0
        y_ = y

        d = Base.@locals
        return [d[id] for id in outputIds]
    end
end

### time events

### discrete events

### continous events

### event assignments


### OUTPUT ###

x00939 = Model(
  start_,
  ode_,
  [
  ],
  make_saving_,
  constants_
)

models = (
    x00939 = x00939
)
tasks = ()

export models, tasks

end
